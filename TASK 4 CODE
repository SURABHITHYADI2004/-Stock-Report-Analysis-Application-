# pip install streamlit boto3 numpy pypdf lancedb pandas
import streamlit as st
import boto3
import json
import numpy as np
import os
import pypdf
import lancedb
from lancedb.pydantic import LanceModel
from typing import List

# Initialize AWS Bedrock client
bedrock = boto3.client("bedrock-runtime", region_name="us-east-1")

# PDF Text Extraction
def extract_text_from_pdf(pdf_file):
    reader = pypdf.PdfReader(pdf_file)
    text = "\n".join([page.extract_text() for page in reader.pages if page.extract_text()])
    return text.strip()

# Generate Text Embedding using Amazon Titan
def generate_embedding(text):
    response = bedrock.invoke_model(
        modelId="amazon.titan-embed-text-v2",
        body=json.dumps({"inputText": text})
    )
    embedding = json.loads(response['body'].read().decode())["embedding"]
    return np.array(embedding)

# LanceDB Model Definition
class StockInfo(LanceModel):
    page: int
    content: str
    embedding: List[float]

# Initialize LanceDB
db_path = "./bott_stock"
os.makedirs(db_path, exist_ok=True)
db = lancedb.connect(db_path)

if "stocks" not in db.table_names():
    table = db.create_table("stocks", schema=StockInfo)
else:
    table = db.open_table("stocks")

# Retrieve Relevant Stock Information
def retrieve_relevant_stock_info(query, min_score=0.5):
    query_embedding = generate_embedding(query)
    results = table.search(query_embedding.tolist()).limit(5).to_df()
    filtered_results = results[results["score"] >= min_score]
    return filtered_results.sort_values(by="score", ascending=False)

# Generate AI Response
def generate_stock_analysis(query):
    retrieved_data = retrieve_relevant_stock_info(query)
    context = "\n".join(retrieved_data["content"].tolist())
    prompt = f"Using the following stock information:\n{context}\nAnswer this question:\n{query}"
    response = bedrock.invoke_model(
        modelId="anthropic.claude-3-sonnet-v2",
        body=json.dumps({"prompt": prompt, "max_tokens": 300})
    )
    return json.loads(response['body'].read().decode())["completion"]

# Streamlit UI
def main():
    st.title("Stock Report Analysis with AI")
    uploaded_file = st.file_uploader("Upload Stock Report (PDF)", type=["pdf"])
    
    if uploaded_file is not None:
        text_data = extract_text_from_pdf(uploaded_file)
        pages = text_data.split("\n\n")
        
        for i, content in enumerate(pages):
            if content.strip():
                embedding = generate_embedding(content)
                table.add([{ "page": i+1, "content": content, "embedding": embedding.tolist() }])
        
        st.success("PDF processed and data stored successfully!")
    
    query = st.text_input("Ask a question about the stock report:")
    if st.button("Get AI Insights") and query:
        response = generate_stock_analysis(query)
        st.subheader("AI Response:")
        st.write(response)

if __name__ == "__main__":
    main()
